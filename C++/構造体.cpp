//クラスの前身ともいうべき構造体。
//いろんな変数をまとめて使うことができる便利な代物。

//構造体の宣言の書式は、struct タグ名{変数宣言群};
//構造体を使えば関連のある変数をひとまとめに扱える。
//構造体の宣言は型の宣言である。
//構造体の各要素はメンバという
//メモリ上にある変数を実体（インスタンス）と、構造体変数のことをオブジェクトともいう。
//メンバを使うときはオブジェクト.メンバとする。

//今まででは例えばクラス名簿を作って扱うとして
//それぞれを別々で用意して使っていた。
//・・・・・・・・・・・・・・例・・・・・・・・・・・・・・//
//const int NUM_STUDENTS = 40;
//const int MAX_NAME = 16;
//char name[NUM_STUDENTS][MAX_NAME + 1];
//int scoreJapanese[NUM_STUDENTS];
//int scoreMath[NUM_STUDENTS];
//int scoreEnglish[NUM_STUDENTS];
//・・・・・・・・・・・・・・例・・・・・・・・・・・・・・//

//とこのようにローカル変数となり、扱うことも可能だが
//ばらばらに扱うことになると面倒になる。
//個人成績を作るとなると以下のようなものをそれぞれ作ることになる。
//・・・・・・・・・・・・・・例・・・・・・・・・・・・・・//
//int sum(const int* scoreJapanese, const int* scoreMath, const int* scoreEnglish, int i)
//{
//	return scoreJapanese[i] + scoreMath[i] + scoreEnglish[i];
//}
//・・・・・・・・・・・・・・例・・・・・・・・・・・・・・//

//このように引数が増えれば増えるほどに膨大で少し解読性の無いコードになってしまう。
//このようにデータの内容にまとまりがある場合はまとめて扱ったほうがきれいでしょう。
//そこで構造体が登場するのです。
//・・・・・・・・・・・・・・例・・・・・・・・・・・・・・//
//struct student
//{
//	char name[MAX_NAME - 1];
//	int scoreJapanese;
//	int scoreEnglish;
//	int scoreMath;
//};
//・・・・・・・・・・・・・・例・・・・・・・・・・・・・・//
//と構造体にすることでこれらの変数をまとめることができ、新たな型として扱うことができます。
//そして、その新たな型の名前はタグ名、あるいはstruct タグ名になります。
//このようにして作られる新しい型のことを「構造体」と、タグ名を「構造体タグ」あるいは「構造体名」と言います。
//ただ、このままではメモリ上にはまだどのメンバーも存在していません。
//まずはstudent型の変数を作る。
//そうすることでその変数はstudent構造体の情報を持った変数になる。
//構造体型の変数を作ることで初めてメモリ上に存在することができる。
//呼び出すときは構造体型のオブジェクト（変数）.メンバと呼び出すことでその情報がつかえる。
