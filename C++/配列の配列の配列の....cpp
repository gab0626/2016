//例えば九九表を作るとしてint kuku[9 * 9];という配列変数に入れるのも不格好。
//その解決法

//配列の配列を作るには単に[]の数を増やせばいい。
//配列の配列は思わぬ大きさになることがある。

//上記した通り、九九表を作ってそれをいったん変数に入れることから始めます。

//・・・・・・・・・・・・・・処理・・・・・・・・・・・・・・//
#include <iostream>
#include <cstdio>
using namespace std;

int main()
{
	const int KUKU_SIZE = 9;
	int kuku[KUKU_SIZE][KUKU_SIZE];

	for (int i = 1; i <= KUKU_SIZE; ++i)
	{
		for (int j = 1; j <= KUKU_SIZE; ++j)
		{
			kuku[i - 1][j - 1] = i * j;
		}
	}

	cout << "	1 2 3 4 5 6 7 8 9" << endl;
	for (int i = 1; i <= KUKU_SIZE; ++i)
	{
		printf(" %d", i);
		for (int j = 1; j <= KUKU_SIZE; ++j)
		{
			printf("%2d", kuku[i - 1][j - 1]);
		}
		cout << endl;
	}
}

//結果
//　１　２　３　４　５　６　７　８　９
//１１　２　３　４　５　６　７　８　９
//
//２２　４　６　８　１０１２１４１６１８
//・・・・・・・・・・・・・・・・・・・・
//９９　１８２７３６４５５４６３７２８１

//今回はprintfを用いて出力した。
//printfは%とdの間に数字を入れるとその桁数だけ表示するという指定ができる。
//今回は２桁だけの表示なので「%2d」というようになっている。

//このように表などの制作をするときには大変便利な多次元配列だが
//調子乗ってあまりにも大きな多次元配列を作ってしまうと厄介なことになる。
//例えばなのだが
//double array[512][512][512];
//とこのような多次元配列を作ったとする。
//一見大丈夫そうなのだが、512 * 512 * 512 * 8 = 1,073,741,824バイト = 1GB
//と膨大な多次元配列を作ってしまうのです。
//こんなにも多くな配列を作ってしまったら、データを読み込むのも遅くなるし
//ましてやマシンが持つかどうかさえも怪しいものです。
//多次元配列はパッとみておさまっていてコンパクトに見えるが
//中身の容量をきちんと理解して使わなければならない。
