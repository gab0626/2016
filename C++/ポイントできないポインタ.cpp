//ポインタというのは、ちゃんとした参照先があって初めて動く。
//けれど、そのポインタがちゃんと参照先を指しているかどうかを知るのは困難。
//かといって、それを指示しているかどうかを確認する変数を作るのも面倒。
//ではどうするか。

//ヌルポインタはどんな変数や関数のアドレスと比較しても等しくならない。
//ヌルポインタはソース上では「0」を表現する。
//ヌルポインタにはNULLマクロを使うことができる。
//ヌルポインタは何らかのしるしの代わりに使える。

//ポインタは有効な参照先を指定してあげないと参照先にアクセスすることができない。

//・・・・・・・・・・・・・・失敗例・・・・・・・・・・・・・・//
//#include <iostream>
//using namespace std;
//
//const char* const MONTH_NAME[] =
//{
//	"睦月","如月","弥生","卯月","皐月","水無月",
//	"文月","葉月","長月","神無月","霜月","師走"
//};
//
//const char* GetOldMonthName(int month)
//{
//	if (1 <= month && month <= 12)
//	{
//		return MONTH_NAME[month - 1];
//	}
//}
//
//int main()
//{
//	int month;
//
//	cout << "今は何月ですか？ ＞" << flush;
//	cin >> month;
//
//	const char* name = GetOldMonthName(month);
//	cout << name << endl;
//}
//・・・・・・・・・・・・・・失敗例・・・・・・・・・・・・・・//

//上記のプログラムでは通常通りに使ってもらえるなら動くが
//意図していない数字を入力したときの例外文を用意していない。
//returnのところでエラーを返してもいいがエラーしか表示されなくなるため
//どこでどんな異常が発生したかどうかの判別がしづらくなる。
//ならば空文字を返すのはどうだろうか？
//一見問題もなく行けそうだが、これがint*だった場合はそうもいかなくなる。
//ではこうしてみてはどうだろうか？

//・・・・・・・・・・・・・・対策例・・・・・・・・・・・・・・//
//const char ERROR[] = "エラー"
//const char* GetOldMonthName(int month)
//{
//	//~
//
//
//	//~
//	return ERROR;
//}
//if (name == ERROR)
//{
//	cout << "そんな月はない" << endl;
//}
//else
//{
 // cout << name << endl;
//}
//・・・・・・・・・・・・・・対策例・・・・・・・・・・・・・・//

//こうすれば帰ってきた値がERRORかどうかを判別すればエラーだったかどうかを簡単に判別できます。
//ただ、毎回これだけの為にエラーを返す変数を作る必要が出来てしまう。
//というわけこういう場合はNULLポインタを使うことが多い。
//ヌルポインタは「どんな変数や関数などのアドレスと比較しても等しくならないことが保証されているアドレス」を持つポインタである。

//・・・・・・・・・・・・・・・処理・・・・・・・・・・・・・・・//
#include <iostream>
using namespace std;

const char* const MONTH_NAME[] =
{
	"睦月", "如月", "弥生", "卯月", "皐月", "水無月",
	"文月", "葉月", "長月", "神無月", "霜月", "師走"
};

const char* GetOldMonthName(int month)
{
	if (1 <= month && month >= 12)
	{
		return MONTH_NAME[month - 1];
		
	}
	return 0;
}

int main()
{
	int month;

	cout << "今は何月ですか　＞" << flush;
	cin >> month;

	const char* name = GetOldMonthName(month);
	if (name == 0)
	{
		cout << "そんな月はありまてん。" << endl;
	}
	else
	{
		cout << name << endl;
	}
}

//実行例
//「０」を入力
//そんな月はありまてん。

//ヌルポインタを返しているところは
//return 0;
//後は「name」がヌルポインタなのかどうかを確かめるだけですむ。
//しかし、int型の0を普通に使いたいときもあり、混濁する場面も多くなる。
//そんな問題を解消するために「NULL」と直接書き込むことができます。
//ヘッターファイルにあらかじめ用意してもらっているマクロ定義の一つで
//結果的には「0」を返すようになっている。
//ただし、ヌルポインタには絶対にやってはいけないこともある。
//上記してあるように何かの数値とヌルポインタは一致しない特性がある。
//その為、下記のような記述はしてはならない。

//・・・・・・・・・・・・・・やってはならない処理・・・・・・・・・・・・・・//
//for (int i = NULL; i < 9; ++i)
//{
//	//〜
//}
//
//for (int i = 0; str[i] != NULL; ++i)
//{
//	//〜
//}
//・・・・・・・・・・・・・・やってはならない処理・・・・・・・・・・・・・・//

//ヌルポインタを使う利点は以下の通り
//アドレスを返す関数で、関数が失敗したときにNULLを返すようにする。
//NULLを渡すと何らかの特別な処理をする関数を作る。
//NULLを渡すとそのパラメータを無視する。
